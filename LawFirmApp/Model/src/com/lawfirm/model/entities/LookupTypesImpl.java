package com.lawfirm.model.entities;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.DB2SQLBuilderImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 20 21:01:13 AST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LookupTypesImpl extends EntityImpl {


    @Override
    protected void create(AttributeList attributeList) {
        // TODO Implement this method
        super.create(attributeList);
       BigDecimal seqNum =  BigDecimal.valueOf((new oracle.jbo.server.SequenceImpl("LOOKUP_ID_SEQ",getDBTransaction())).getSequenceNumber().longValue()) ;
       setLookupId(seqNum);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        LookupId,
        LookupType,
        Description,
        Notes,
        UsedScreen,
        CreatedBy,
        AmendBy,
        CreationDate,
        AmendDate,
        VersionNo,
        LookupDetails;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LOOKUPID = AttributesEnum.LookupId.index();
    public static final int LOOKUPTYPE = AttributesEnum.LookupType.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int USEDSCREEN = AttributesEnum.UsedScreen.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int AMENDBY = AttributesEnum.AmendBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int AMENDDATE = AttributesEnum.AmendDate.index();
    public static final int VERSIONNO = AttributesEnum.VersionNo.index();
    public static final int LOOKUPDETAILS = AttributesEnum.LookupDetails.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LookupTypesImpl() {
    }

    /**
     * Gets the attribute value for LookupId, using the alias name LookupId.
     * @return the value of LookupId
     */
    public BigDecimal getLookupId() {
        return (BigDecimal) getAttributeInternal(LOOKUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LookupId.
     * @param value value to set the LookupId
     */
    public void setLookupId(BigDecimal value) {
        setAttributeInternal(LOOKUPID, value);
    }

    /**
     * Gets the attribute value for LookupType, using the alias name LookupType.
     * @return the value of LookupType
     */
    public String getLookupType() {
        return (String) getAttributeInternal(LOOKUPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LookupType.
     * @param value value to set the LookupType
     */
    public void setLookupType(String value) {
        setAttributeInternal(LOOKUPTYPE, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for Notes, using the alias name Notes.
     * @return the value of Notes
     */
    public String getNotes() {
        return (String) getAttributeInternal(NOTES);
    }

    /**
     * Sets <code>value</code> as the attribute value for Notes.
     * @param value value to set the Notes
     */
    public void setNotes(String value) {
        setAttributeInternal(NOTES, value);
    }

    /**
     * Gets the attribute value for UsedScreen, using the alias name UsedScreen.
     * @return the value of UsedScreen
     */
    public String getUsedScreen() {
        return (String) getAttributeInternal(USEDSCREEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsedScreen.
     * @param value value to set the UsedScreen
     */
    public void setUsedScreen(String value) {
        setAttributeInternal(USEDSCREEN, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for AmendBy, using the alias name AmendBy.
     * @return the value of AmendBy
     */
    public String getAmendBy() {
        return (String) getAttributeInternal(AMENDBY);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Date getCreationDate() {
        return (Date) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for AmendDate, using the alias name AmendDate.
     * @return the value of AmendDate
     */
    public Date getAmendDate() {
        return (Date) getAttributeInternal(AMENDDATE);
    }

    /**
     * Gets the attribute value for VersionNo, using the alias name VersionNo.
     * @return the value of VersionNo
     */
    public BigDecimal getVersionNo() {
        return (BigDecimal) getAttributeInternal(VERSIONNO);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getLookupDetails() {
        return (RowIterator) getAttributeInternal(LOOKUPDETAILS);
    }

    /**
     * @param lookupId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal lookupId) {
        return new Key(new Object[] { lookupId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.lawfirm.model.entities.LookupTypes");
    }
}

